buildscript {
    ext.kotlin_version = '1.2.21'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.16"
    }
}

plugins {
    id "org.jetbrains.kotlin.plugin.noarg" version "1.2.20"
    id "at.comm_unity.gradle.plugins.jpamodelgen" version "1.1.4"
}

group 'com.kameocode'
archivesBaseName = "any-dao"
version '1.0.0-SNAPSHOT'

description 'AnyDAO is an Kotlin JPA wrapper library which makes your database queries short, clean and easy to read.'


apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'signing'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}
jpaModelgen {
    jpaModelgenSourcesDir = 'src/generated/java'
}

compileJpaModelgen {
    includes += ['**/test/helpers/*.java']
}

dependencies {
    compileOnly group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.2.Final'

    // kotlin libraries
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compileOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // tests
    testCompile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.2.16.Final'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "com.h2database:h2:1.4.196"

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc, group: "documentation") {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}


uploadArchives {
    repositories {
        mavenDeployer {


            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // repository(url: mavenLocal().url)

            String tossrhUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ""
            String tossrhPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ""

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: tossrhUsername, password: tossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: tossrhUsername, password: tossrhPassword)
            }

            pom.project {
                name = "${project.group}:${archivesBaseName}"
                description = project.description
                url = 'https://github.com/kameocode/any-dao'

                inceptionYear = '2018'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'vinga'
                        name = 'Kamila Myczkowska'
                        email = 'kamila.myczkowska@gmail.com'
                        organization = 'KameoCode'
                        organizationUrl = 'http://kameocode.com'
                    }
                }

                scm {
                    connection 'scm:git:git://github.com/kameocode/any-dao.git'
                    developerConnection 'scm:git:ssh://github.com/kameocode/any-dao.git'
                    url 'http://github.com/kameocode/any-dao/tree/master'
                }
            }
        }
    }
}


